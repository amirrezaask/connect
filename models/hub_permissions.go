// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HubPermission is an object representing the database table.
type HubPermission struct {
	UserID     string     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	HubID      string     `boil:"hub_id" json:"hub_id" toml:"hub_id" yaml:"hub_id"`
	Premission null.Int64 `boil:"premission" json:"premission,omitempty" toml:"premission" yaml:"premission,omitempty"`

	R *hubPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hubPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HubPermissionColumns = struct {
	UserID     string
	HubID      string
	Premission string
}{
	UserID:     "user_id",
	HubID:      "hub_id",
	Premission: "premission",
}

var HubPermissionTableColumns = struct {
	UserID     string
	HubID      string
	Premission string
}{
	UserID:     "hub_permissions.user_id",
	HubID:      "hub_permissions.hub_id",
	Premission: "hub_permissions.premission",
}

// Generated where

var HubPermissionWhere = struct {
	UserID     whereHelperstring
	HubID      whereHelperstring
	Premission whereHelpernull_Int64
}{
	UserID:     whereHelperstring{field: "\"hub_permissions\".\"user_id\""},
	HubID:      whereHelperstring{field: "\"hub_permissions\".\"hub_id\""},
	Premission: whereHelpernull_Int64{field: "\"hub_permissions\".\"premission\""},
}

// HubPermissionRels is where relationship names are stored.
var HubPermissionRels = struct {
	Hub  string
	User string
}{
	Hub:  "Hub",
	User: "User",
}

// hubPermissionR is where relationships are stored.
type hubPermissionR struct {
	Hub  *Hub  `boil:"Hub" json:"Hub" toml:"Hub" yaml:"Hub"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*hubPermissionR) NewStruct() *hubPermissionR {
	return &hubPermissionR{}
}

// hubPermissionL is where Load methods for each relationship are stored.
type hubPermissionL struct{}

var (
	hubPermissionAllColumns            = []string{"user_id", "hub_id", "premission"}
	hubPermissionColumnsWithoutDefault = []string{"user_id", "hub_id", "premission"}
	hubPermissionColumnsWithDefault    = []string{}
	hubPermissionPrimaryKeyColumns     = []string{"user_id", "hub_id"}
)

type (
	// HubPermissionSlice is an alias for a slice of pointers to HubPermission.
	// This should almost always be used instead of []HubPermission.
	HubPermissionSlice []*HubPermission
	// HubPermissionHook is the signature for custom HubPermission hook methods
	HubPermissionHook func(context.Context, boil.ContextExecutor, *HubPermission) error

	hubPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hubPermissionType                 = reflect.TypeOf(&HubPermission{})
	hubPermissionMapping              = queries.MakeStructMapping(hubPermissionType)
	hubPermissionPrimaryKeyMapping, _ = queries.BindMapping(hubPermissionType, hubPermissionMapping, hubPermissionPrimaryKeyColumns)
	hubPermissionInsertCacheMut       sync.RWMutex
	hubPermissionInsertCache          = make(map[string]insertCache)
	hubPermissionUpdateCacheMut       sync.RWMutex
	hubPermissionUpdateCache          = make(map[string]updateCache)
	hubPermissionUpsertCacheMut       sync.RWMutex
	hubPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hubPermissionBeforeInsertHooks []HubPermissionHook
var hubPermissionBeforeUpdateHooks []HubPermissionHook
var hubPermissionBeforeDeleteHooks []HubPermissionHook
var hubPermissionBeforeUpsertHooks []HubPermissionHook

var hubPermissionAfterInsertHooks []HubPermissionHook
var hubPermissionAfterSelectHooks []HubPermissionHook
var hubPermissionAfterUpdateHooks []HubPermissionHook
var hubPermissionAfterDeleteHooks []HubPermissionHook
var hubPermissionAfterUpsertHooks []HubPermissionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HubPermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HubPermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HubPermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HubPermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HubPermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HubPermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HubPermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HubPermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HubPermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hubPermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHubPermissionHook registers your hook function for all future operations.
func AddHubPermissionHook(hookPoint boil.HookPoint, hubPermissionHook HubPermissionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		hubPermissionBeforeInsertHooks = append(hubPermissionBeforeInsertHooks, hubPermissionHook)
	case boil.BeforeUpdateHook:
		hubPermissionBeforeUpdateHooks = append(hubPermissionBeforeUpdateHooks, hubPermissionHook)
	case boil.BeforeDeleteHook:
		hubPermissionBeforeDeleteHooks = append(hubPermissionBeforeDeleteHooks, hubPermissionHook)
	case boil.BeforeUpsertHook:
		hubPermissionBeforeUpsertHooks = append(hubPermissionBeforeUpsertHooks, hubPermissionHook)
	case boil.AfterInsertHook:
		hubPermissionAfterInsertHooks = append(hubPermissionAfterInsertHooks, hubPermissionHook)
	case boil.AfterSelectHook:
		hubPermissionAfterSelectHooks = append(hubPermissionAfterSelectHooks, hubPermissionHook)
	case boil.AfterUpdateHook:
		hubPermissionAfterUpdateHooks = append(hubPermissionAfterUpdateHooks, hubPermissionHook)
	case boil.AfterDeleteHook:
		hubPermissionAfterDeleteHooks = append(hubPermissionAfterDeleteHooks, hubPermissionHook)
	case boil.AfterUpsertHook:
		hubPermissionAfterUpsertHooks = append(hubPermissionAfterUpsertHooks, hubPermissionHook)
	}
}

// One returns a single hubPermission record from the query.
func (q hubPermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HubPermission, error) {
	o := &HubPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hub_permissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HubPermission records from the query.
func (q hubPermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (HubPermissionSlice, error) {
	var o []*HubPermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HubPermission slice")
	}

	if len(hubPermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HubPermission records in the query.
func (q hubPermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hub_permissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hubPermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hub_permissions exists")
	}

	return count > 0, nil
}

// Hub pointed to by the foreign key.
func (o *HubPermission) Hub(mods ...qm.QueryMod) hubQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HubID),
	}

	queryMods = append(queryMods, mods...)

	query := Hubs(queryMods...)
	queries.SetFrom(query.Query, "\"hubs\"")

	return query
}

// User pointed to by the foreign key.
func (o *HubPermission) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadHub allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hubPermissionL) LoadHub(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHubPermission interface{}, mods queries.Applicator) error {
	var slice []*HubPermission
	var object *HubPermission

	if singular {
		object = maybeHubPermission.(*HubPermission)
	} else {
		slice = *maybeHubPermission.(*[]*HubPermission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hubPermissionR{}
		}
		args = append(args, object.HubID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hubPermissionR{}
			}

			for _, a := range args {
				if a == obj.HubID {
					continue Outer
				}
			}

			args = append(args, obj.HubID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hubs`),
		qm.WhereIn(`hubs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Hub")
	}

	var resultSlice []*Hub
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Hub")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hubs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hubs")
	}

	if len(hubPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Hub = foreign
		if foreign.R == nil {
			foreign.R = &hubR{}
		}
		foreign.R.HubPermissions = append(foreign.R.HubPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HubID == foreign.ID {
				local.R.Hub = foreign
				if foreign.R == nil {
					foreign.R = &hubR{}
				}
				foreign.R.HubPermissions = append(foreign.R.HubPermissions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hubPermissionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHubPermission interface{}, mods queries.Applicator) error {
	var slice []*HubPermission
	var object *HubPermission

	if singular {
		object = maybeHubPermission.(*HubPermission)
	} else {
		slice = *maybeHubPermission.(*[]*HubPermission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hubPermissionR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hubPermissionR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(hubPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.HubPermissions = append(foreign.R.HubPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.HubPermissions = append(foreign.R.HubPermissions, local)
				break
			}
		}
	}

	return nil
}

// SetHub of the hubPermission to the related item.
// Sets o.R.Hub to related.
// Adds o to related.R.HubPermissions.
func (o *HubPermission) SetHub(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Hub) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hub_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hub_id"}),
		strmangle.WhereClause("\"", "\"", 2, hubPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.HubID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HubID = related.ID
	if o.R == nil {
		o.R = &hubPermissionR{
			Hub: related,
		}
	} else {
		o.R.Hub = related
	}

	if related.R == nil {
		related.R = &hubR{
			HubPermissions: HubPermissionSlice{o},
		}
	} else {
		related.R.HubPermissions = append(related.R.HubPermissions, o)
	}

	return nil
}

// SetUser of the hubPermission to the related item.
// Sets o.R.User to related.
// Adds o to related.R.HubPermissions.
func (o *HubPermission) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hub_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, hubPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.HubID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &hubPermissionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			HubPermissions: HubPermissionSlice{o},
		}
	} else {
		related.R.HubPermissions = append(related.R.HubPermissions, o)
	}

	return nil
}

// HubPermissions retrieves all the records using an executor.
func HubPermissions(mods ...qm.QueryMod) hubPermissionQuery {
	mods = append(mods, qm.From("\"hub_permissions\""))
	return hubPermissionQuery{NewQuery(mods...)}
}

// FindHubPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHubPermission(ctx context.Context, exec boil.ContextExecutor, userID string, hubID string, selectCols ...string) (*HubPermission, error) {
	hubPermissionObj := &HubPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hub_permissions\" where \"user_id\"=$1 AND \"hub_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, hubID)

	err := q.Bind(ctx, exec, hubPermissionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hub_permissions")
	}

	if err = hubPermissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hubPermissionObj, err
	}

	return hubPermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HubPermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hub_permissions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hubPermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hubPermissionInsertCacheMut.RLock()
	cache, cached := hubPermissionInsertCache[key]
	hubPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hubPermissionAllColumns,
			hubPermissionColumnsWithDefault,
			hubPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hubPermissionType, hubPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hubPermissionType, hubPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hub_permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hub_permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hub_permissions")
	}

	if !cached {
		hubPermissionInsertCacheMut.Lock()
		hubPermissionInsertCache[key] = cache
		hubPermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HubPermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HubPermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hubPermissionUpdateCacheMut.RLock()
	cache, cached := hubPermissionUpdateCache[key]
	hubPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hubPermissionAllColumns,
			hubPermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hub_permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hub_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hubPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hubPermissionType, hubPermissionMapping, append(wl, hubPermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hub_permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hub_permissions")
	}

	if !cached {
		hubPermissionUpdateCacheMut.Lock()
		hubPermissionUpdateCache[key] = cache
		hubPermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hubPermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hub_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hub_permissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HubPermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hubPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hub_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hubPermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in hubPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all hubPermission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HubPermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hub_permissions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hubPermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hubPermissionUpsertCacheMut.RLock()
	cache, cached := hubPermissionUpsertCache[key]
	hubPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hubPermissionAllColumns,
			hubPermissionColumnsWithDefault,
			hubPermissionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			hubPermissionAllColumns,
			hubPermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hub_permissions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(hubPermissionPrimaryKeyColumns))
			copy(conflict, hubPermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hub_permissions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(hubPermissionType, hubPermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hubPermissionType, hubPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hub_permissions")
	}

	if !cached {
		hubPermissionUpsertCacheMut.Lock()
		hubPermissionUpsertCache[key] = cache
		hubPermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HubPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HubPermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HubPermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hubPermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"hub_permissions\" WHERE \"user_id\"=$1 AND \"hub_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hub_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hub_permissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hubPermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hubPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hub_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hub_permissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HubPermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hubPermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hubPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hub_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hubPermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hubPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hub_permissions")
	}

	if len(hubPermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HubPermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHubPermission(ctx, exec, o.UserID, o.HubID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HubPermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HubPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hubPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hub_permissions\".* FROM \"hub_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hubPermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HubPermissionSlice")
	}

	*o = slice

	return nil
}

// HubPermissionExists checks if the HubPermission row exists.
func HubPermissionExists(ctx context.Context, exec boil.ContextExecutor, userID string, hubID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hub_permissions\" where \"user_id\"=$1 AND \"hub_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, hubID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, hubID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hub_permissions exists")
	}

	return exists, nil
}
