// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissions)
	t.Run("Channels", testChannels)
	t.Run("HubPermissions", testHubPermissions)
	t.Run("Hubs", testHubs)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsDelete)
	t.Run("Channels", testChannelsDelete)
	t.Run("HubPermissions", testHubPermissionsDelete)
	t.Run("Hubs", testHubsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsQueryDeleteAll)
	t.Run("Channels", testChannelsQueryDeleteAll)
	t.Run("HubPermissions", testHubPermissionsQueryDeleteAll)
	t.Run("Hubs", testHubsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsSliceDeleteAll)
	t.Run("Channels", testChannelsSliceDeleteAll)
	t.Run("HubPermissions", testHubPermissionsSliceDeleteAll)
	t.Run("Hubs", testHubsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsExists)
	t.Run("Channels", testChannelsExists)
	t.Run("HubPermissions", testHubPermissionsExists)
	t.Run("Hubs", testHubsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsFind)
	t.Run("Channels", testChannelsFind)
	t.Run("HubPermissions", testHubPermissionsFind)
	t.Run("Hubs", testHubsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsBind)
	t.Run("Channels", testChannelsBind)
	t.Run("HubPermissions", testHubPermissionsBind)
	t.Run("Hubs", testHubsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsOne)
	t.Run("Channels", testChannelsOne)
	t.Run("HubPermissions", testHubPermissionsOne)
	t.Run("Hubs", testHubsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsAll)
	t.Run("Channels", testChannelsAll)
	t.Run("HubPermissions", testHubPermissionsAll)
	t.Run("Hubs", testHubsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsCount)
	t.Run("Channels", testChannelsCount)
	t.Run("HubPermissions", testHubPermissionsCount)
	t.Run("Hubs", testHubsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsHooks)
	t.Run("Channels", testChannelsHooks)
	t.Run("HubPermissions", testHubPermissionsHooks)
	t.Run("Hubs", testHubsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsInsert)
	t.Run("ChannelPermissions", testChannelPermissionsInsertWhitelist)
	t.Run("Channels", testChannelsInsert)
	t.Run("Channels", testChannelsInsertWhitelist)
	t.Run("HubPermissions", testHubPermissionsInsert)
	t.Run("HubPermissions", testHubPermissionsInsertWhitelist)
	t.Run("Hubs", testHubsInsert)
	t.Run("Hubs", testHubsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ChannelPermissionToChannelUsingChannel", testChannelPermissionToOneChannelUsingChannel)
	t.Run("ChannelPermissionToUserUsingUser", testChannelPermissionToOneUserUsingUser)
	t.Run("HubPermissionToHubUsingHub", testHubPermissionToOneHubUsingHub)
	t.Run("HubPermissionToUserUsingUser", testHubPermissionToOneUserUsingUser)
	t.Run("HubToUserUsingCreatorUser", testHubToOneUserUsingCreatorUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ChannelToChannelPermissions", testChannelToManyChannelPermissions)
	t.Run("ChannelToUsers", testChannelToManyUsers)
	t.Run("HubToHubPermissions", testHubToManyHubPermissions)
	t.Run("HubToUsers", testHubToManyUsers)
	t.Run("UserToChannelPermissions", testUserToManyChannelPermissions)
	t.Run("UserToChannels", testUserToManyChannels)
	t.Run("UserToHubPermissions", testUserToManyHubPermissions)
	t.Run("UserToHubs", testUserToManyHubs)
	t.Run("UserToCreatorHubs", testUserToManyCreatorHubs)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ChannelPermissionToChannelUsingChannelPermissions", testChannelPermissionToOneSetOpChannelUsingChannel)
	t.Run("ChannelPermissionToUserUsingChannelPermissions", testChannelPermissionToOneSetOpUserUsingUser)
	t.Run("HubPermissionToHubUsingHubPermissions", testHubPermissionToOneSetOpHubUsingHub)
	t.Run("HubPermissionToUserUsingHubPermissions", testHubPermissionToOneSetOpUserUsingUser)
	t.Run("HubToUserUsingCreatorHubs", testHubToOneSetOpUserUsingCreatorUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("HubToUserUsingCreatorHubs", testHubToOneRemoveOpUserUsingCreatorUser)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ChannelToChannelPermissions", testChannelToManyAddOpChannelPermissions)
	t.Run("ChannelToUsers", testChannelToManyAddOpUsers)
	t.Run("HubToHubPermissions", testHubToManyAddOpHubPermissions)
	t.Run("HubToUsers", testHubToManyAddOpUsers)
	t.Run("UserToChannelPermissions", testUserToManyAddOpChannelPermissions)
	t.Run("UserToChannels", testUserToManyAddOpChannels)
	t.Run("UserToHubPermissions", testUserToManyAddOpHubPermissions)
	t.Run("UserToHubs", testUserToManyAddOpHubs)
	t.Run("UserToCreatorHubs", testUserToManyAddOpCreatorHubs)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ChannelToUsers", testChannelToManySetOpUsers)
	t.Run("HubToUsers", testHubToManySetOpUsers)
	t.Run("UserToChannels", testUserToManySetOpChannels)
	t.Run("UserToHubs", testUserToManySetOpHubs)
	t.Run("UserToCreatorHubs", testUserToManySetOpCreatorHubs)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ChannelToUsers", testChannelToManyRemoveOpUsers)
	t.Run("HubToUsers", testHubToManyRemoveOpUsers)
	t.Run("UserToChannels", testUserToManyRemoveOpChannels)
	t.Run("UserToHubs", testUserToManyRemoveOpHubs)
	t.Run("UserToCreatorHubs", testUserToManyRemoveOpCreatorHubs)
}

func TestReload(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsReload)
	t.Run("Channels", testChannelsReload)
	t.Run("HubPermissions", testHubPermissionsReload)
	t.Run("Hubs", testHubsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsReloadAll)
	t.Run("Channels", testChannelsReloadAll)
	t.Run("HubPermissions", testHubPermissionsReloadAll)
	t.Run("Hubs", testHubsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsSelect)
	t.Run("Channels", testChannelsSelect)
	t.Run("HubPermissions", testHubPermissionsSelect)
	t.Run("Hubs", testHubsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsUpdate)
	t.Run("Channels", testChannelsUpdate)
	t.Run("HubPermissions", testHubPermissionsUpdate)
	t.Run("Hubs", testHubsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ChannelPermissions", testChannelPermissionsSliceUpdateAll)
	t.Run("Channels", testChannelsSliceUpdateAll)
	t.Run("HubPermissions", testHubPermissionsSliceUpdateAll)
	t.Run("Hubs", testHubsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
