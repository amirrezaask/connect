// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testHubPermissions(t *testing.T) {
	t.Parallel()

	query := HubPermissions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testHubPermissionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHubPermissionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := HubPermissions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHubPermissionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HubPermissionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHubPermissionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := HubPermissionExists(ctx, tx, o.UserID, o.HubID)
	if err != nil {
		t.Errorf("Unable to check if HubPermission exists: %s", err)
	}
	if !e {
		t.Errorf("Expected HubPermissionExists to return true, but got false.")
	}
}

func testHubPermissionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	hubPermissionFound, err := FindHubPermission(ctx, tx, o.UserID, o.HubID)
	if err != nil {
		t.Error(err)
	}

	if hubPermissionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testHubPermissionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = HubPermissions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testHubPermissionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := HubPermissions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testHubPermissionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	hubPermissionOne := &HubPermission{}
	hubPermissionTwo := &HubPermission{}
	if err = randomize.Struct(seed, hubPermissionOne, hubPermissionDBTypes, false, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, hubPermissionTwo, hubPermissionDBTypes, false, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = hubPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = hubPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HubPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testHubPermissionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	hubPermissionOne := &HubPermission{}
	hubPermissionTwo := &HubPermission{}
	if err = randomize.Struct(seed, hubPermissionOne, hubPermissionDBTypes, false, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, hubPermissionTwo, hubPermissionDBTypes, false, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = hubPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = hubPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func hubPermissionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func hubPermissionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func hubPermissionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func hubPermissionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func hubPermissionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func hubPermissionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func hubPermissionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func hubPermissionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func hubPermissionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HubPermission) error {
	*o = HubPermission{}
	return nil
}

func testHubPermissionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &HubPermission{}
	o := &HubPermission{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize HubPermission object: %s", err)
	}

	AddHubPermissionHook(boil.BeforeInsertHook, hubPermissionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	hubPermissionBeforeInsertHooks = []HubPermissionHook{}

	AddHubPermissionHook(boil.AfterInsertHook, hubPermissionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	hubPermissionAfterInsertHooks = []HubPermissionHook{}

	AddHubPermissionHook(boil.AfterSelectHook, hubPermissionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	hubPermissionAfterSelectHooks = []HubPermissionHook{}

	AddHubPermissionHook(boil.BeforeUpdateHook, hubPermissionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	hubPermissionBeforeUpdateHooks = []HubPermissionHook{}

	AddHubPermissionHook(boil.AfterUpdateHook, hubPermissionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	hubPermissionAfterUpdateHooks = []HubPermissionHook{}

	AddHubPermissionHook(boil.BeforeDeleteHook, hubPermissionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	hubPermissionBeforeDeleteHooks = []HubPermissionHook{}

	AddHubPermissionHook(boil.AfterDeleteHook, hubPermissionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	hubPermissionAfterDeleteHooks = []HubPermissionHook{}

	AddHubPermissionHook(boil.BeforeUpsertHook, hubPermissionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	hubPermissionBeforeUpsertHooks = []HubPermissionHook{}

	AddHubPermissionHook(boil.AfterUpsertHook, hubPermissionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	hubPermissionAfterUpsertHooks = []HubPermissionHook{}
}

func testHubPermissionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHubPermissionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(hubPermissionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHubPermissionToOneHubUsingHub(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local HubPermission
	var foreign Hub

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, hubPermissionDBTypes, false, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, hubDBTypes, false, hubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Hub struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HubID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Hub().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := HubPermissionSlice{&local}
	if err = local.L.LoadHub(ctx, tx, false, (*[]*HubPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Hub == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Hub = nil
	if err = local.L.LoadHub(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Hub == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testHubPermissionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local HubPermission
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, hubPermissionDBTypes, false, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := HubPermissionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*HubPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testHubPermissionToOneSetOpHubUsingHub(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HubPermission
	var b, c Hub

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hubPermissionDBTypes, false, strmangle.SetComplement(hubPermissionPrimaryKeyColumns, hubPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, hubDBTypes, false, strmangle.SetComplement(hubPrimaryKeyColumns, hubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, hubDBTypes, false, strmangle.SetComplement(hubPrimaryKeyColumns, hubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Hub{&b, &c} {
		err = a.SetHub(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Hub != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.HubPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HubID != x.ID {
			t.Error("foreign key was wrong value", a.HubID)
		}

		if exists, err := HubPermissionExists(ctx, tx, a.UserID, a.HubID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testHubPermissionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HubPermission
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hubPermissionDBTypes, false, strmangle.SetComplement(hubPermissionPrimaryKeyColumns, hubPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.HubPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := HubPermissionExists(ctx, tx, a.UserID, a.HubID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testHubPermissionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHubPermissionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HubPermissionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHubPermissionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HubPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	hubPermissionDBTypes = map[string]string{`UserID`: `character varying`, `HubID`: `character varying`, `Premission`: `bigint`}
	_                    = bytes.MinRead
)

func testHubPermissionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(hubPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(hubPermissionAllColumns) == len(hubPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testHubPermissionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(hubPermissionAllColumns) == len(hubPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HubPermission{}
	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, hubPermissionDBTypes, true, hubPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(hubPermissionAllColumns, hubPermissionPrimaryKeyColumns) {
		fields = hubPermissionAllColumns
	} else {
		fields = strmangle.SetComplement(
			hubPermissionAllColumns,
			hubPermissionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := HubPermissionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testHubPermissionsUpsert(t *testing.T) {
	t.Parallel()

	if len(hubPermissionAllColumns) == len(hubPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := HubPermission{}
	if err = randomize.Struct(seed, &o, hubPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HubPermission: %s", err)
	}

	count, err := HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, hubPermissionDBTypes, false, hubPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HubPermission struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HubPermission: %s", err)
	}

	count, err = HubPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
